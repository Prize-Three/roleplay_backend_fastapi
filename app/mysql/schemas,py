from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime

class DialogBase(BaseModel):
    speaker: str
    message: str
    message_time: Optional[datetime] = None

class DialogCreate(DialogBase):
    history_id: int
    user_id: int

class Dialog(DialogBase):
    id: int
    history_id: int
    user_id: int

    class Config:
        orm_mode = True
        # from_attributes = True

class TagBase(BaseModel):
    tag: str

class TagCreate(TagBase):
    history_id: int

class Tag(TagBase):
    id: int
    history_id: int

    class Config:
        orm_mode = True
        # from_attributes = True

class HistoryBase(BaseModel):
    situation: str
    duration: Optional[datetime] = None
    date: Optional[datetime] = None
    my_role: str
    ai_role: str

class HistoryCreate(HistoryBase):
    user_id: int
    voice_id: int

class History(HistoryBase):
    id: int
    user_id: int
    voice_id: int
    tags: List[Tag] = []
    dialogs: List[Dialog] = []

    class Config:
        orm_mode = True
        # from_attributes = True

class VoiceBase(BaseModel):
    voice_name: str

class VoiceCreate(VoiceBase):
    user_id: int

class Voice(VoiceBase):
    id: int
    user_id: int

    class Config:
        orm_mode = True
        # from_attributes = True

class UserBase(BaseModel):
    name: str
    email: str
    join_date: Optional[datetime] = None
    play_time: Optional[float] = None

class UserCreate(UserBase):
    pass

class User(UserBase):
    id: int
    voices: List[Voice] = []
    histories: List[History] = []

    class Config:
        orm_mode = True

# ResultReport 모델
class ResultReportBase(BaseModel):
    conversation_summary: Optional[str] = None
    child_questions: Optional[int] = None
    child_responses: Optional[int] = None
    interaction_summary: Optional[str] = None
    comprehensive_results: Optional[str] = None

class ResultReportCreate(ResultReportBase):
    history_id: int

class ResultReport(ResultReportBase):
    id: int
    history_id: int
    vocabularies: List["Vocabulary"] = []
    used_sentences: List["UsedSentence"] = []
    used_words: List["UsedWord"] = []

    class Config:
        orm_mode = True

# Vocabulary 모델
class VocabularyBase(BaseModel):
    development_type: bool
    total_word_count: Optional[int] = None
    basic_word_count: Optional[int] = None
    new_word_count: Optional[int] = None

class VocabularyCreate(VocabularyBase):
    resultreport_id: int

class Vocabulary(VocabularyBase):
    id: int
    resultreport_id: int

    class Config:
        orm_mode = True

# UsedSentence 모델
class UsedSentenceBase(BaseModel):
    development_type: bool
    dialog_content: Optional[str] = None
    comment: Optional[str] = None

class UsedSentenceCreate(UsedSentenceBase):
    resultreport_id: int

class UsedSentence(UsedSentenceBase):
    id: int
    resultreport_id: int

    class Config:
        orm_mode = True

# UsedWord 모델
class UsedWordBase(BaseModel):
    development_type: bool
    word: str

class UsedWordCreate(UsedWordBase):
    resultreport_id: int

class UsedWord(UsedWordBase):
    id: int
    resultreport_id: int

    class Config:
        orm_mode = True
